# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  tags:
    include:
    - '*'

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  # dockerRegistryServiceConnection: '<your-registry-connection>'
  # imageRepository: '<your-project(imagename)>'
  # containerRegistry: '<your-registry>.azurecr.io'

  dockerRegistryServiceConnection: 'spreg'
  imageRepository: 'petclinic/spring-petclinic-monolith'
  containerRegistry: 'spreg.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'azurespringacr1580782c-auth'
  # Maven Caching
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  sonar-url: 'http://20.214.221.108:9000'
  sonar-token: 'sqp_ce8950fdd0fedd29a13f42115cb9e0aa44c03b10'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
      
    steps:
    - task: Cache@2
      displayName: Cache Maven local repo  
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
          maven
        path: $(MAVEN_CACHE_FOLDER) 

    - task: Maven@4
      displayName: Maven Build and SonarQube Analysis
      inputs:
        mavenPomFile: 'pom.xml'
        publishJUnitResults: true
        codeCoverageTool: 'jacoco'
        codeCoverageClassFilesDirectories:  'target/classes, target/testClasses'
        codeCoverageSourceDirectories: 'src/java, src/test'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: 1.11
        mavenVersionOption: 'Default'
        mavenOptions: '$(MAVEN_OPTS)'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        options: "-Dsonar.projectKey=petclinic-monolith -Dsonar.host.url=$(sonar-url) -Dsonar.login=$(sonar-token)"
        goals: "-B verify sonar:sonar"

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(build.sourceBranchName)  
    
    - task: Bash@3    
      inputs: 
        targetType: inline
        script: "sed -i 's/tag:.*/tag: $(build.sourceBranchName)/g' charts/*/values*.yaml"

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'charts'
        artifact: charts
